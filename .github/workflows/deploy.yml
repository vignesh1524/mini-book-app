name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      run: |
        docker build -t mini-book-app .

    - name: Tag Docker image
      run: |
        docker tag mini-book-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/mini-book-app:latest

    - name: Push Docker image to Amazon ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/mini-book-app:latest

    - name: Get EC2 Instance ID
      id: get_instance_id
      run: |
        instance_id=$(aws ec2 describe-instances \
          --query 'Reservations[0].Instances[0].InstanceId' \
          --output text)

        if [ "$instance_id" == "None" ] || [ -z "$instance_id" ]; then
          echo "No EC2 instance found."
          exit 1
        fi
        echo "::set-output name=instance_id::$instance_id"
        echo "EC2 Instance ID: $instance_id"

    - name: Check EC2 instance status
      id: instance_status
      run: |
        instance_state=$(aws ec2 describe-instances \
          --instance-ids ${{ steps.get_instance_id.outputs.instance_id }} \
          --query 'Reservations[0].Instances[0].State.Name' \
          --output text)
        echo "Instance state: $instance_state"
        echo "::set-output name=status::$instance_state"

    - name: Start EC2 instance if stopped
      if: steps.instance_status.outputs.status == 'stopped'
      run: |
        aws ec2 start-instances --instance-ids ${{ steps.get_instance_id.outputs.instance_id }}
        aws ec2 wait instance-running --instance-ids ${{ steps.get_instance_id.outputs.instance_id }}
        echo "Instance started."

    - name: Get EC2 Public IP
      id: get_ip
      run: |
        public_ip=$(aws ec2 describe-instances \
          --instance-ids ${{ steps.get_instance_id.outputs.instance_id }} \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)

        if [ "$public_ip" == "None" ] || [ -z "$public_ip" ]; then
          echo "No public IP found."
          exit 1
        fi

        echo "::set-output name=public_ip::$public_ip"
        echo "EC2 Public IP: $public_ip"

    - name: SSH into EC2 and deploy
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ steps.get_ip.outputs.public_ip }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          echo "Checking for running container..."
          if docker ps -q --filter "name=mini-book-app-container" | grep -q .; then
            echo "Stopping and removing existing container..."
            docker stop mini-book-app-container
            docker rm mini-book-app-container
          fi

          echo "Pulling new image..."
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/mini-book-app:latest

          echo "Running new container..."
          docker run -d --name mini-book-app-container -p 80:80 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/mini-book-app:latest
